{"version":3,"sources":["components/ui/atoms/card/card.jsx","components/ui/molecules/card-list/card-list.jsx","components/ui/molecules/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","a","fetch","res","json","data","setState","state","searchField","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEA,UAAU,YACVC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNTC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,aACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCCG,G,wDAnCb,aAAe,IAAD,8BACZ,gBAOFC,kBARc,sBAQM,8BAAAC,EAAA,sEACAC,MAAM,8CADN,cACZC,EADY,gBAECA,EAAIC,OAFL,OAEZC,EAFY,OAIlB,EAAKC,SAAS,CAAEd,SAAUa,IAJR,2CANlB,EAAKE,MAAQ,CACXf,SAAU,GACVgB,YAAa,IAJH,E,0CAed,WAAU,IAAD,OACP,EAAkCC,KAAKF,MAA/Bf,EAAR,EAAQA,SAAUgB,EAAlB,EAAkBA,YACZE,EAAmBlB,EAASmB,QAAO,SAACxB,GAAD,OACvCA,EAAQE,KAAKuB,cAAcC,SAASL,EAAYI,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,cACZC,aAAc,SAACkB,GAAD,OAAO,EAAKR,SAAS,CAAEE,YAAaM,EAAEC,OAAOC,WAG7D,cAAC,EAAD,CAAUxB,SAAUkB,W,GA9BVO,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc24777d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      className=\"card-item\"\n      alt=\"monster\"\n      src={`https://robohash.org/${props.monster.id}?set=set4`}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\n\nimport { Card } from \"../../atoms/card/card\";\n\nimport \"./card-list.css\";\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from \"react\";\n\nimport \"./search-box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search-box\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import { Component } from \"react\";\n// import logo from \"./logo.svg\";\n\nimport { CardList } from \"./components/ui/molecules/card-list/card-list\";\nimport { SearchBox } from \"./components/ui/molecules/search-box/search-box\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await res.json();\n\n    this.setState({ monsters: data });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>The cat collective</h1>\n        <SearchBox\n          placeholder=\"search cats\"\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}